import { DatabaseService } from './database';
import { supabase } from './supabase';

interface AzureOpenAIConfig {
  endpoint: string;
  apiKey: string;
  deploymentName: string;
  apiVersion: string;
}

const config: AzureOpenAIConfig = {
  endpoint: "https://reconheceai-chat-resource.cognitiveservices.azure.com/",
  apiKey: "9uMxhg6a9u1Qrk1ttVAAG51XnCSJ1yUim86DczJkMl9nzjpqazUyJQQJ99BFACHYHv6XJ3w3AAAAACOGeSL5",
  deploymentName: "gpt-4.1-mini",
  apiVersion: "2024-12-01-preview"
};

export class AzureOpenAIService {
  private static systemPrompt = `
Voc√™ √© um assistente financeiro inteligente especializado em gest√£o de finan√ßas pessoais.
Seu objetivo √© ajudar usu√°rios a entender e gerenciar suas finan√ßas de forma inteligente e educativa.

INSTRU√á√ïES IMPORTANTES:
1. Responda de forma clara, objetiva e educativa
2. Use um tom amig√°vel e profissional
3. Sempre que usar dados para responder, mencione isso (ex: "Consultando seus dados...", "De acordo com seus lan√ßamentos...")
4. Se n√£o houver dados no contexto para responder, informe ao usu√°rio de forma clara
5. Limite suas respostas a t√≥picos relacionados a finan√ßas pessoais
6. Forne√ßa insights valiosos e sugest√µes pr√°ticas
7. Use emojis moderadamente para tornar a conversa mais amig√°vel
8. Seja proativo em sugerir melhorias financeiras quando apropriado

CAPACIDADES ESPECIAIS:
- An√°lise de padr√µes de gastos
- Sugest√µes de economia
- Alertas sobre gastos an√¥malos
- Previs√µes financeiras
- Educa√ß√£o financeira personalizada
- Compara√ß√µes e benchmarks
`;

  /**
   * Fun√ß√£o privada e centralizada para fazer a chamada final √† API da OpenAI.
   * @param userPrompt O prompt completo, j√° com contexto, a ser enviado.
   */
  private static async _callOpenAI(userPrompt: string): Promise<string> {
    try {
      const url = `${config.endpoint}openai/deployments/${config.deploymentName}/chat/completions?api-version=${config.apiVersion}`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'api-key': config.apiKey,
        },
        body: JSON.stringify({
          messages: [
            { role: 'system', content: this.systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: 1000,
          temperature: 0.3,
          top_p: 0.95,
          frequency_penalty: 0,
          presence_penalty: 0
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status} ${await response.text()}`);
      }

      const data = await response.json();
      
      if (data.choices && data.choices.length > 0) {
        return data.choices[0].message.content;
      } else {
        throw new Error('Resposta inv√°lida da API');
      }
    } catch (error) {
      console.error('Erro ao chamar Azure OpenAI:', error);
      throw new Error('Erro ao processar sua mensagem. Tente novamente.');
    }
  }

  /**
   * Fun√ß√£o principal do chat. Orquestra a busca de dados e a chamada √† IA.
   * Analisa a mensagem do usu√°rio, busca dados relevantes no banco se necess√°rio,
   * e ent√£o chama a IA com o contexto para gerar uma resposta.
   * @param userMessage A mensagem original do usu√°rio.
   */
  static async getChatResponse(userMessage: string): Promise<string> {
    const lowerCaseMessage = userMessage.toLowerCase();
    let contextPrompt = 'O usu√°rio fez uma pergunta geral sobre finan√ßas.';
    let currency = 'BRL'; // Moeda Padr√£o

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data: profile } = await supabase
          .from('profiles')
          .select('moeda')
          .eq('id', user.id)
          .single();
        if (profile?.moeda) {
          currency = profile.moeda;
        }
      }

      // Palavras-chave para diferentes tipos de an√°lise
      const expenseKeywords = ['gasto', 'gastei', 'gastos', 'despesa', 'despesas', 'gastando', 'gastar'];
      const balanceKeywords = ['saldo', 'saldos', 'conta', 'contas', 'dinheiro', 'valor'];
      const summaryKeywords = ['resumo', 'vis√£o geral', 'geral', 'total', 'situa√ß√£o', 'como est√°', 'como est√£o'];
      const goalKeywords = ['meta', 'metas', 'objetivo', 'objetivos', 'economizar', 'poupar'];
      const categoryKeywords = ['categoria', 'categorias', 'onde', 'gastando mais', 'maior gasto'];
      const incomeKeywords = ['receita', 'receitas', 'ganho', 'renda', 'sal√°rio'];
      const budgetKeywords = ['or√ßamento', 'or√ßamentos', 'planejamento', 'planejar'];
      const trendKeywords = ['tend√™ncia', 'evolu√ß√£o', 'crescimento', 'comparar', 'm√™s passado'];
      
      // Buscar dados baseado no contexto da mensagem
      if (expenseKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const data = await DatabaseService.getGastosPorCategoria(
          new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
          new Date().toISOString()
        );
        contextPrompt = `üìä Dados de gastos do usu√°rio para este m√™s (agrupados por categoria):\n${JSON.stringify(data, null, 2)}`;
      } 
      else if (balanceKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const contas = await DatabaseService.getContas();
        contextPrompt = `üí∞ Dados de saldo das contas do usu√°rio:\n${JSON.stringify(contas.map(c => ({ 
          nome: c.nome, 
          tipo: c.tipo,
          saldo_atual: c.saldo_atual,
          limite_credito: c.limite_credito 
        })), null, 2)}`;
      } 
      else if (summaryKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const [resumo, gastosPorCategoria, contas] = await Promise.all([
          DatabaseService.getResumoFinanceiro(
            new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
            new Date().toISOString()
          ),
          DatabaseService.getGastosPorCategoria(
            new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
            new Date().toISOString()
          ),
          DatabaseService.getContas()
        ]);
        contextPrompt = `üìà Resumo financeiro completo do usu√°rio para o m√™s atual:
        
RESUMO GERAL: ${JSON.stringify(resumo, null, 2)}

GASTOS POR CATEGORIA: ${JSON.stringify(gastosPorCategoria, null, 2)}

CONTAS: ${JSON.stringify(contas.map(c => ({ 
          nome: c.nome, 
          tipo: c.tipo,
          saldo_atual: c.saldo_atual 
        })), null, 2)}`;
      } 
      else if (goalKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const metas = await DatabaseService.getMetas();
        contextPrompt = `üéØ Dados sobre as metas financeiras do usu√°rio:\n${JSON.stringify(metas.map(m => ({ 
          nome: m.nome, 
          tipo: m.tipo,
          valor_meta: m.valor_meta, 
          valor_atual: m.valor_atual, 
          status: m.status,
          data_inicio: m.data_inicio,
          data_fim: m.data_fim
        })), null, 2)}`;
      }
      else if (categoryKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const gastosPorCategoria = await DatabaseService.getGastosPorCategoria(
          new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
          new Date().toISOString()
        );
        contextPrompt = `üìä An√°lise detalhada de gastos por categoria:\n${JSON.stringify(gastosPorCategoria, null, 2)}`;
      }
      else if (incomeKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const lancamentos = await DatabaseService.getLancamentos({
          dataInicio: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
          dataFim: new Date().toISOString(),
          tipo: 'RECEITA'
        });
        contextPrompt = `üíµ Dados de receitas do usu√°rio para este m√™s:\n${JSON.stringify(lancamentos.map(l => ({
          descricao: l.descricao,
          valor: l.valor,
          data: l.data,
          categoria: l.categoria?.nome
        })), null, 2)}`;
      }
      else if (budgetKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const orcamentos = await DatabaseService.getOrcamentos(
          new Date().getFullYear(),
          new Date().getMonth() + 1
        );
        contextPrompt = `üìã Dados de or√ßamentos do usu√°rio para este m√™s:\n${JSON.stringify(orcamentos, null, 2)}`;
      }
      else if (trendKeywords.some(keyword => lowerCaseMessage.includes(keyword))) {
        const evolucao = await DatabaseService.getEvolucaoMensal(6);
        contextPrompt = `üìà Evolu√ß√£o financeira dos √∫ltimos 6 meses:\n${JSON.stringify(evolucao, null, 2)}`;
      }
    } catch (error) {
      console.error('Erro ao buscar contexto para IA:', error);
      contextPrompt = 'Ocorreu um erro ao tentar buscar os dados financeiros para responder a esta pergunta. Informe o usu√°rio sobre o erro e sugira tentar novamente.';
    }
    
    // Prompt final com instru√ß√µes de formata√ß√£o melhoradas
    const finalPrompt = `
      **CONTEXTO FINANCEIRO:**
      ---
      Moeda do usu√°rio: ${currency}
      ${contextPrompt}
      ---
      
      **INSTRU√á√ïES DE RESPOSTA:**
      1. **Formata√ß√£o de Moeda:** Sempre use "R$" para valores em BRL, "$" para USD, "‚Ç¨" para EUR
      2. **Clareza:** Seja espec√≠fico com n√∫meros e valores
      3. **Insights:** Forne√ßa an√°lises √∫teis e sugest√µes pr√°ticas
      4. **Educa√ß√£o:** Explique conceitos quando apropriado
      5. **A√ß√£o:** Sugira pr√≥ximos passos quando relevante
      
      **PERGUNTA DO USU√ÅRIO:** "${userMessage}"
      
      Responda de forma completa, √∫til e educativa, usando os dados fornecidos quando dispon√≠veis.
    `;
    
    return this._callOpenAI(finalPrompt);
  }

  // Fun√ß√µes especializadas mantidas para compatibilidade
  static async categorizarDespesa(descricao: string, categorias: string[]): Promise<string> {
    const prompt = `
Baseado na descri√ß√£o "${descricao}", qual das seguintes categorias melhor se adequa?
Categorias dispon√≠veis: ${categorias.join(', ')}
Responda apenas com o nome da categoria mais apropriada.
`;
    return (await this._callOpenAI(prompt)).trim();
  }

  static async analisarGastos(dadosFinanceiros: any): Promise<string> {
    const prompt = `
Voc√™ √© um Analista Financeiro S√™nior e especialista em visualiza√ß√£o de dados. Sua tarefa √© analisar os dados financeiros do usu√°rio e retornar *exclusivamente* um array de objetos JSON contendo insights.

**Formato de Sa√≠da Obrigat√≥rio:**
A sua resposta deve ser um array JSON. Cada objeto no array representa um insight e deve ter a seguinte estrutura:
{
  "title": "Um t√≠tulo curto e impactante para o insight (m√°x 4 palavras).",
  "description": "Uma frase explicativa, concisa e acion√°vel (m√°x 20 palavras).",
  "type": "A classifica√ß√£o do insight. Use *exclusivamente* um dos seguintes valores: 'positivo', 'atencao', 'informativo'.",
  "icon": "O nome de um √≠cone da biblioteca lucide-react que melhor representa o insight. Escolha *exclusivamente* da seguinte lista: ['TrendingUp', 'TrendingDown', 'AlertTriangle', 'PiggyBank', 'CalendarDays', 'Wallet', 'Info', 'Scale']"
}

**Dados Financeiros do Usu√°rio para o Per√≠odo de "${dadosFinanceiros.periodo}":**
- Receitas: R$ ${dadosFinanceiros.receitas?.toFixed(2) || '0.00'}
- Despesas: R$ ${dadosFinanceiros.despesas?.toFixed(2) || '0.00'}
- Taxa de Poupan√ßa: ${dadosFinanceiros.taxaPoupanca?.toFixed(1) || '0'}%
- Gasto Di√°rio M√©dio: R$ ${dadosFinanceiros.gastoDiarioMedio?.toFixed(2) || '0.00'}
- Patrim√¥nio L√≠quido: R$ ${dadosFinanceiros.patrimonioLiquido?.toFixed(2) || '0.00'}
- Principais Categorias de Gastos: ${dadosFinanceiros.categoriasMaisGastas?.join(', ') || 'Nenhuma'}

**Regras para Gerar os Insights:**
1.  Gere de 2 a 4 insights no total. O primeiro insight deve ser sempre o mais relevante (o maior ponto positivo ou o maior ponto de aten√ß√£o).
2.  Se a "Taxa de Poupan√ßa" for maior que 20%, crie um insight 'positivo' sobre isso. Se for negativa, crie um de 'atencao'.
3.  Analise o "Gasto Di√°rio M√©dio". Se for um valor relevante comparado √† receita, crie um insight 'informativo' ou de 'atencao'.
4.  Se o saldo for negativo, crie um insight de 'atencao' sobre o d√©ficit.
5.  Use a "Principal Categoria de Gastos" para gerar um insight espec√≠fico e acion√°vel.
6.  Seja direto, certeiro e use uma linguagem que motive o usu√°rio a agir.

**Exemplo de Sa√≠da Esperada (apenas para refer√™ncia de formato):**
[
  {
    "title": "Excelente Poupan√ßa!",
    "type": "positivo",
    "description": "Voc√™ est√° poupando ${dadosFinanceiros.taxaPoupanca?.toFixed(1)}% da sua renda. Continue assim!",
    "icon": "TrendingUp"
  },
  {
    "title": "Aten√ß√£o ao Gasto Di√°rio",
    "type": "atencao",
    "description": "Seu gasto m√©dio √© de R$ ${dadosFinanceiros.gastoDiarioMedio?.toFixed(2)}. Monitore para otimizar.",
    "icon": "AlertTriangle"
  }
]

Lembre-se: sua resposta deve conter APENAS o array JSON, sem nenhum texto adicional, explica√ß√£o ou formata√ß√£o como \`\`\`json.
`;
    return this._callOpenAI(prompt);
  }

  static async gerarInsightsPersonalizados(dadosCompletos: any): Promise<string> {
    const prompt = `
Analise os dados financeiros completos do usu√°rio e gere insights personalizados:

DADOS: ${JSON.stringify(dadosCompletos, null, 2)}

Forne√ßa insights sobre:
1. Padr√µes de comportamento financeiro
2. Oportunidades de economia
3. Riscos identificados
4. Recomenda√ß√µes personalizadas
5. Metas sugeridas

Seja espec√≠fico e pr√°tico nas recomenda√ß√µes.
`;
    return this._callOpenAI(prompt);
  }
}